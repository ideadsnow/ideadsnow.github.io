[{"title":"感冒爆炸","date":"2017-03-03T03:08:09.000Z","path":"life/感冒爆炸.html","text":"一年不感冒，感冒耗一月 各种计划全被打乱呵呵哒 估计还要一周才能好（又 TM 是 flag） 这个月欠下计划的债太多了 f**k","tags":[{"name":"自己瞎扯淡","slug":"too-young-too-simple","permalink":"//www.ideadsnow.com/tags/too-young-too-simple/"}]},{"title":"现代操作系统笔记 第三章","date":"2017-01-05T11:39:28.000Z","path":"learn/现代操作系统笔记-第三章.html","text":"内存超载解决方案 交换（swap） 虚拟内存（virtual memory） 第一种方案的问题 交换时会导致产生多个空闲区（也称为空洞，hole，类似于磁盘碎片），通过把所有的进程尽可能向下移动，有可能将这些小的空闲区域合成一大块，该技术被称为内存紧缩（memory compaction） 但内存紧缩非常耗时，例如，一台 1GB 内存大小的计算机每 20ns 可以复制 4 个字节，它紧缩全部内存要大约花费 5s。所以内存紧缩操作通常不进行 进程在运行时使用内存常常需要动态增长，如果有相邻的足够使用的空闲区域则没问题，如果相邻内存空间被另一个进程占用，则只能将这个进程移到一段更大的内存中去，如果没有这么大的空间，那么这个进程只能阻塞等待空间，或者死掉 如果大部分运行的进程都需要动态增长内存，那么为了减少进程内存搬运的开销，一种可行的方案是，当换入和移动进程时为它多分配一些预留的内存 速度，典型的 SATA 硬盘读写速度一般不过 100MB/s，意味着大约 10s 才能换出一个 1GB 的程序，再花另一个 10s 才能再将一个 1GB 的程序换入 空闲内存管理 位图 划分内存为许多个小的单位，每个单位用 0 或 1 记录是否空闲 划分单元的大小是一个重要的设计因素。在位图大小和内存单元大小之间要取平衡，且进程的大小一定要是划分单元的整数倍，不然在最后一个分配单元中就会有一定数量的内存被浪费 空闲链表 若 H 代表空闲，P 代表占用 链表可以形如：head: {H, start, length, next} -&gt; next: {P, start, length, next2} -&gt; … tip: 使用双链表效率会更高 按照以上链表方式管理内存时，为新进程分配内存的算法有以下几种 首次适配（first fit） 下次适配（first fit） 最佳适配（best fit） 最差适配（worst fit） 另外一种 “快速适配（quick fit）” 的算法为一些常用大小的空闲区维护单独的链表 虚拟内存一段有意思的故事：交换技术到虚拟内存的过渡期间，有一种方案，将程序分割成多个片段，这些片段被称为覆盖（overlay），然后像交换整个进程一样每次只交换这些覆盖（overlay），不过这必须要码农们自己管理好程序分割，枯燥又困难，于是懒人们就搞出来了这个自动化的方案 基本思想 每个程序都有自己独立的地址空间，这个空间被分为许多块，每一块被称为一页或页面（page）。每一页有连续的地址范围。这些页被映射到物理内存，但并不是所有的页都被映射到物理内存才能运行程序。当程序引用到一部分已经在物理内存的地址空间时，硬件立即执行操作；而如果引用到一些不在物理内存中的地址空间时，操作系统将会把缺失的部分装入物理内存并重新执行失败的指令 分页（paging） 虚拟地址空间片段被称为页（page），物理内存也被 MMU（Memory Management Unit）逻辑上划分为页框（page frame)，大小一般与页一致。当程序访问了没有对应页框的页时，MMU 注意到该页没有被映射，于是使 CPU 陷入操作系统，称为 缺页中断（page fault） 。操作系统将会找一个很少使用的页框把它的内容写入磁盘（如果它不在磁盘上），然后把要访问的页装入页框，修改映射关系，然后重新启动引起陷阱的指令 页表 页表的作用是把虚拟页面映射为页框 可以把页表当成一个函数input：虚拟页号output：物理页框 页表项的结构与机器密切相关，但不同机器的页表项存储的信息都大致相同 高速缓存禁止位：0/1 是否允许高速缓存 访问位： 修改位：标明页面是否被修改，如果被修改过，则操作系统重新分配页框时将必须先把该页内容写入磁盘，否则直接简单丢弃即可 保护位：用于指出一个页允许什么类型的访问，比如读、写、执行等 加速分页过程 在任何分页式系统中，都需要考虑两个主要问题 虚拟地址到物理地址的映射必须非常快 如果虚拟地址空间很大，那么页表也会很大 有个容易忘的点：每个进程都有自己的一个页表，因为每个进程都有自己的虚拟地址空间 两个极端的例子 加载一个进程的时候，把该进程的页表直接塞进一个专门的寄存器，接下来执行指令时只需从寄存器读取页表即可，不用访问内存。不过这种方法缺点很明显，一是当页表非常大时，成本很高，二是发生进程切换时，要重新加载另一个进程的页表，代价高昂 整个页表都存在内存中，这样只需一个存储页表起始地址的寄存器即可，这样进程切换时，只需修改寄存器的值。缺点同样很明显，这样每次执行指令时，都必须访问内存，以完成页表项的装入，速度非常慢 转换检测缓冲区（相联存储器） 首先有这样一个事实 大多数程序总是对少量的页面进行多次的访问因此可以把常常访问的少量页面的对应页表项存入一个高速硬件设备，用到时直接从该高速硬件设备中读 这个设备称为转换检测缓冲区（Translation Lookaside Buffer, TLB），也被称为相联存储器（associate memory），它通常存在于 MMU 中，包含少量的表项，在实际中很少会超过 64 个表项 软件 TLB 管理 由操作系统实现页面管理，TLB 表项被操作系统显式装载 针对大内存的页表多级页表 如图所示，32 位的虚拟地址呗划分为 10 位的 PT1 域、 10 位的 PT2 域和 12 位的 Offset（偏移量） 域。因为 偏移量是 12 位，所以页长为 2^12 = 4KB 引入多级页表的目的是避免把全部页表一直保存在内存中，特别是那些从不需要的页表。例如一个需要 12MB 内存的程序，其底端是 4MB 程序正文段，上面是 4MB 的数据段，顶端是 4MB 的堆栈段，在数据段和堆栈段之间是大量根本没用使用的空闲区 倒排页表（inverted page table） 如同名字一样，反向思维，页表不再是每页一条记录，而是每个页框一条记录，表项包含页框号、进程号、页号等信息 未完待续","tags":[{"name":"现代操作系统","slug":"现代操作系统","permalink":"//www.ideadsnow.com/tags/现代操作系统/"},{"name":"笔记","slug":"笔记","permalink":"//www.ideadsnow.com/tags/笔记/"}]},{"title":"探究 PYTHON 生成随机字符串","date":"2016-10-03T08:38:48.000Z","path":"learn/探究-python-生成随机字符串.html","text":"目前看到的最简洁的方法1234567import osdef randomString(n): return (''.join(map(lambda x:(hex(ord(x))[2:]), os.urandom(n))))[0:8]if __name__ == '__main__': print randomString(16) 来看看 randomString 函数所做的事情 首先这个函数的一行代码里面，最核心的是 os.urandom(n) 函数，这就是标准库提供的产生随机字串的函数，它的原理我们留到最后再说，现在我们只要知道它会返回一个由参数 n 指定的字节长度的随机字节串（而非字符串，因为可能结果并不能被任何一种字符编码所解释，所以不能称其为字符串） map(function, iterable, ...) 函数，对可迭代数据结构 iterable 中的每一个元素应用 function 函数，并将结果作为新的 list 返回。在 randomString 函数中的用途是将 os.urandom(n) 所返回的随机字节串中的每个字节传入 lambda 表达式进行处理 lambda x:(hex(ord(x))[2:]) 这个 lambda 表达式的作用是将 os.urandom(n) 返回结果中的每个字节转换为可见的由数字和字母组成的长度为 2 的字符 ord(x) 在此处是计算一个字节 unicode 码值的十进制表示，比如字符 a，unicode code 是 0x0061，则 ord(&#39;a&#39;) 返回 97，因为十六进制的 61 等于十进制的 97。注：其实这个函数对传入参数是 unicode object 和 8-bit 字符 的操作分别是 unichr() 和 chr() 函数的逆向过程 hex(x) 把十进制的数转换为十六进制，因为此处我们不需要结果中的前导 0x，所以做切片操作 [2:0] &#39;&#39;.join(str_array) 以 &#39;&#39; 为分隔符把参数重的字符连接成一个字符串 os.urandom(n)作用官方文档如是说 os.urandom(n)​ Return a string of n random bytes suitable for cryptographic use. ​ This function returns random bytes from an OS-specific randomness source. The returned data should be unpredictable enough for cryptographic applications, though its exact quality depends on the OS implementation. On a UNIX-like system this will query /dev/urandom, and on Windows it will use CryptGenRandom(). If a randomness source is not found, NotImplementedError will be raised. ​ For an easy-to-use interface to the random number generator provided by your platform, please see random.SystemRandom. ​ New in version 2.4. 第一段的大意是这个函数将会返回一个适用于加密的 n 个字节长度的随机字符串 那么它内部是如何实现随机的呢？我们通过第二段内容可知，这个函数将会调用系统提供的随机源，依赖于程序运行时的当前系统，在 Windows 上会使用 CryptGenRandom()，而在类 UNIX 系统上将会使用 /dev/urandom 如果当前系统没有提供随机源，那么将会抛出一个 NotImplementedError 源码这是个蛋疼心碎的过程，费尽九牛二虎之力，在 mac 上翻了半天 python 2.7 的 lib 目录，在 os.py 中没有找到 urandom 这个函数定义，打印 os.__all__ 发现包括 urandom 在内的许多模块并不是直接定义在 os.py 中的，而是扩展（__all__.__extend__）自其它模块 而 urandom 就是扩展自 posix 模块，看来这玩意是 POSIX 的标准接口，涨姿势了 然而问题又来了，没有找到 posix.py 文件！ 只有以下这些名字与 posix 相关的文件 posixfile.py posixfile.pyc posixfile.pyo posixpath.py posixpath.pyc posixpath.pyo 在这些文件里面根本没有 urandom 相关字眼（卧尼玛…….. 目前在 python 命令行环境下通过内建 help() 函数查看 posix 模块的帮助文档，在文档中可以看到 urandom()，不过也没有具体的实现代码 1234urandom(...) urandom(n) -&gt; str Return n random bytes suitable for cryptographic use. 好吧，我不纠结，这里挖个坑，等有空再研究下（一般这么说的时候都没有下文了呵呵呵呵呵呵 POSIX 中的 urandom 在类 UNIX 系统中的实现维基百科如是说 In Unix-like operating systems, /dev/random is a special file that serves as a blocking) pseudorandom number generator. It allows access to environmental noise collected from device drivers and other sources.[1] Not all operating systems implement the same semantics for /dev/random. 剩下的大篇幅介绍请各位直接去 wiki 上看，内容还是挺丰富的 我的理解如下 /dev/random 和 /dev/urandom 都是 UNIX 提供的产生永不为空的随机字节流的伪设备，有许多程序和安全程序都依赖于它们 /dev/random 优势：随机性足够高 劣势：依赖于系统中断，如果系统中断数不足，则会锁死，尝试读取的进程将会进入等待 /dev/urandom 优势：不依赖系统中断，速度快 劣势：相对前者数据随机性不高，且依赖于系统噪声（当前打开的文件数，进程数等等）","tags":[{"name":"python","slug":"python","permalink":"//www.ideadsnow.com/tags/python/"}]},{"title":"Ubuntu 16.04 版本 MySQL 的安装、基本配置和使用","date":"2016-09-08T17:30:59.000Z","path":"learn/ubuntu-16-04-版本-mysql-的安装、基本配置和使用.html","text":"安装安装应该没什么问题，直接运行 sudo apt-get install mysql-server 基本配置允许远程访问 MySQLMySQL 装好了，但在默认情况下只监听本地连接，也就是说，现在还不能通过远程连接访问和操作数据库，所以需要做如下操作 cd /etc/mysql/ sudo grep -r bind-address . 查找包含 bind-address 项的配置文件 编辑第 2 步中找到的文件，将该文件中的 bind-address = 127.0.0.1 注释掉或改为 bind-address = 你想监听的客户端 IP sudo /etc/init.d/mysql restart 重启服务 修改 MySQL 编码为 UTF-8MySQL 默认的编码是 latin1，并不支持中文想查看你的 MySQL 编码？试试以下步骤 mysql -u root -p 登录 MySQL 管理后台 在 mysql&gt; 后面输入 show variables like &#39;character%&#39;; 并执行，即可看到类似下面的界面 好了，到这里你应该已经看到自己的运行结果貌似和图里的不太一样？怎么回事？&lt;(￣）￣)&gt;废话，我已经改过配置了，所以我的图里面当然都已经是 utf8 了 接下来跟我做以下操作 cd /etc/mysql/ sudo grep -r &quot;[client]&quot; . 递归查找当前目录下所有包含 [client] 的文件行 修改第 2 步找到的文件，在 [client] 后添加一行 default-character-set=utf8 sudo grep -r &quot;[mysqld]&quot; . 递归查找当前目录下所有包含 [mysqld] 的文件行 修改第 4 步找到的文件，在 [mysqld] 后添加一行 default-character-set=utf8，以及另一行 init_connect=’SET NAMES utf8’ sudo /etc/init.d/mysql restart 现在再去运行最开始的那条命令看看，是不是和我放出来的图片一毛一样了，Good job！ 创建一个用户一般来说 root 用户是 DBA 所操作，普通用户使用 root 非常不安全，所以接下来我们了解如何创建一个普通用户的账户 mysql -u root -p 以一个拥有创建新用户权限的用户登录，这里简单来做，直接用 root 用户登录 create user 用户名@&#39;host&#39; identified by &#39;密码&#39; 其中 host 是创建的新用户被允许从哪个 IP 登录的意思，如果只允许从本地登录（root 用户默认就是这样）则填 localhost，如果不限制登录 IP，则可以填 % 为用户赋予对某数据库下所有表进行操作的权限 grant all privileges on 某数据库名.* to 用户名@&#39;host&#39; identified by &#39;密码&#39;; flush privileges; 注意这里有个坑，在 MySQL 5.6 版本之后，添加了一个安全机制，其中对我们执行以上操作影响最大的是密码复杂度有要求，想填类似 123456 这样的智障密码会直接被拒绝创建用户 or 赋权，错误信息如下 ERROR 1819 (HY000): Your password does not satisfy the current policy requirements 解决方法是 SET GLOBAL validate_password_policy=&#39;LOW&#39;;，将安全等级降为 LOW关于安全等级的详细介绍 LOW 密码必须至少有8个字符长 MEDIUM 密码必须包含至少 1 个数字字符,1 个大写和小写字符,和 1 个特殊字符 STRONG （懒得查，用到再说………..） 另外 MySQL 5.7 版本以上又多了个密码有效期的概念，又是个坑，再次修改配置文件为如下所示12[mysqld]default_password_lifetime=0 如果做了本文档前面的操作，上面这个东西如何修改、在哪修改等等的问题应该不会存在吧？如果有问题请先撞墙三分钟然后重复上文操作 有关密码有效期的详细官方文档 创建一个数据库简单 mysql -u root -p create database 数据库 全文完","tags":[{"name":"linux","slug":"linux","permalink":"//www.ideadsnow.com/tags/linux/"},{"name":"mysql","slug":"mysql","permalink":"//www.ideadsnow.com/tags/mysql/"}]},{"title":"来到你的城市【云南】","date":"2016-06-23T17:57:23.000Z","path":"life/来到你的城市【云南】.html","text":"多图，流量党慎点 闲逛时间太久懒得扯太多扯太多要变流水账还不如放点图来的简单有效 来到云南天气好的时候拍风景和妹子天气不好的时候拍妹子 你问为什么现在才发这破文我才不会说是因为照片太大全放在这页面里面大部分看这破文的人的电脑 or 爪机会炸要发只能发压缩转格式后的低像素图而我又懒得折腾就拖到现在了 繁花似锦，非常喜欢这张 大理古城 云南大学图书馆 洱海边拍照的妹子 丁丁当当甜品店，丽江 丽江的少女风客栈 啊，香格里拉 洱海里的一个寺庙 丽江古城一角 丽江古城一角 洱海 又是洱海 海景房 天龙八部影视城 囚车 纳帕海的四个刚刚骑完马的妹子 丽江古城一户人家墙上的纳西族东巴文字 好孩子看不见————大理丽江这种地方…请至少带一个女生前来…文艺浪漫什么的呵呵呵…到处都是🌹🌹🌹🌹🌹🌹🌹🌹🌹🌹🌹🌹🌹🌹🌹🌹🌹🌹🌹🌹🌹几个大老爷们简直煞风景…正在路上的时候，刚刚失恋的路小花同学在微信说“以后要带爱我的人去云南”呵呵呵呵呵，当时静静看着讨论组信息没说话现在在这儿吐槽不好吧？","tags":[{"name":"自己瞎扯淡","slug":"too-young-too-simple","permalink":"//www.ideadsnow.com/tags/too-young-too-simple/"}]},{"title":"烂笔头：JavaScript The Good Parts","date":"2016-06-22T14:12:02.000Z","path":"learn/烂笔头：javascript-the-good-parts.html","text":"书是这本，挺不错的，有兴趣可以看看 JavaScript:The Good Parts 数据类型和运算符 只有一种数字类型，内部表示为64位浮点数 NaN 不等于任何值，包括它自己 被当作逻辑假的值：false null undefined &#39;&#39; 0 NaN 未指定return值时将会返回 undefined / 运算符有可能会产生一个非整数结果，即使两个运算数都是整数 减少全局变量污染方法 在应用中只创建一个全局变量： var MYAPP = {}; 该全局变量此时成了应用的容器，可以如下方式使用： 123MYAPP.value1 = &#123;...&#125;;MYAPP.value2 = &#123;...&#125;;... 使用闭包（Closure） 函数 当函数被调用时，会得到一个“免费”的参数，即 arguments “数组”，通过该”数组”可访问所有函数被调用时传入的参数，无论该参数是否在该函数定义时被指定为形参 12345function() &#123; for(var i = 0; i &lt; arguments.length; i++) &#123; console.log(arguments[i]); &#125;&#125; 由于语言的一个设计错误，arguments 并非是一个真正的数组，而是一个“类似数组”（array-like）的对象，它有一个 length 属性，但缺少所有数组的方法 prototype 原型链 每个对象都连接到一个原型对象，并且它可以从中继承属性 所有通过对象字面量创建的对象都连接到 Object.prototype 这个标准对象 原型链在更新时无效，仅在检索属性值的时候起效当尝试获取某个对象的属性值，且对象本身无此属性，那么将会去该对象的原型中寻找，如果找不到则继续从原型的原型中寻找，直到到达终点Object.prototype 对象为止，如果最终仍未找到属性，则返回 undefined。该过程被称为委托 hasOwnProperty 只会检查对象自己属性，不会检查原型链 删除 delete obj.val 将删除对象obj本身的val属性，且不会影响原型链 递归 JavaScript 没有提供“尾递归优化” wtf？变量作用域JavaScript 不支持块级作用域，这意味着所有定义在函数任何地方的参数和变量在函数内部任何地方都可见因此，尽管很多支持块级作用域的语言推荐尽可能迟地声明变量，而在 JavaScript 中却应该在函数体的顶部声明函数中用到的所有变量 闭包（Closure）12345678910var myVar = function() &#123; var innerVal = 0; return &#123; getInnerVal() &#123; return innerVar; &#125; &#125;&#125;//myVar.getInnerVal()才能取得innerVal的值 （伪）数组（array-like） JavaScript 中没有真正的数组，它把数组的下标转换为字符串，用其作为属性 数组是一段线性分配的内存，它通过计算指针偏移量去访问元素，数组是很快的数据结构 “数组”中可同时包含不同类型的元素 “数组”拥有一个诡异的 length 属性 坑，及避免方法 parseInt 方法 遇到非数字时停止解析，所以 parseInt(&quot;123&quot;) 和 parseInt(&quot;123abc&quot;) 的结果是一样的 若字符串首位为 0，如 “013”，则会按照八进制进行转换。好在可以提供基数，如 parseInt(&quot;013&quot;, 10)，最好始终使用这种写法 + 运算符 两个运算数都是数字则返回两数之和 一个运算数是空字符串，则会将另一个运算数转换为字符串并返回 其余情况均为拼接字符串 浮点数运算不精确，0.1 + 0.2 不等于 0.3。可以通过整数化来解决，如 0.1 + 0.2 等于 (0.1 * 10 + 0.2 * 10) / 10 写 JS 代码好习惯123(function($)&#123; //在此处使用 $&#125;(jQuery)); 原因： 闭包避免了全局污染 将 jQuery 对象传进闭包后再使用 $ 可以避免与其他也使用了 $ 的框架冲突 $(document).ready(function() {}); 与 $(function() {}); 等价 on、bind、live、delegate() 区别http://www.cnblogs.com/moonreplace/archive/2012/10/09/2717136.html","tags":[{"name":"烂笔头","slug":"烂笔头","permalink":"//www.ideadsnow.com/tags/烂笔头/"},{"name":"javascript","slug":"javascript","permalink":"//www.ideadsnow.com/tags/javascript/"}]},{"title":"填坑日常之 EDAC DIMM CE Error","date":"2016-06-22T13:49:26.000Z","path":"learn/填坑日常之-edac-dimm-ce-error.html","text":"2015-12-30 下午 ngaios 监控发现硬盘满报警2015-12-31 早上开始排查原因 经过排查发现 log 目录下的三个系统日志非常大，竟有 8.7G 大小 读日志内容后发现有大量的 EDAC DIMM CE Error 出现 经过一番 Google 后得知这是由于内存错误，导致系统自动启动错误恢复机制，但恢复失败写入日志，继续修复，循环下去导致日志文件大小暴增 粗略看了看 linux 的内核文档之 edac doc 根据这一段 123456789101112131415Dual channels allows for 128 bit data transfers to the CPU from memory.Some newer chipsets allow for more than 2 channels, like Fully Buffered DIMMs(FB-DIMMs). The following example will assume 2 channels: Channel 0 Channel 1 =================================== csrow0 | DIMM_A0 | DIMM_B0 | csrow1 | DIMM_A0 | DIMM_B0 | =================================== =================================== csrow2 | DIMM_A1 | DIMM_B1 | csrow3 | DIMM_A1 | DIMM_B1 | =================================== 于是在机器上执行 1234root@ubuntu:/var/log# grep &quot;[0-9]&quot; /sys/devices/system/edac/mc/mc*/csrow*/ch*_ce_count/sys/devices/system/edac/mc/mc0/csrow0/ch0_ce_count:0/sys/devices/system/edac/mc/mc0/csrow1/ch0_ce_count:0/sys/devices/system/edac/mc/mc0/csrow2/ch0_ce_count:4213901959 参考前面的文档，可得出问题的是 DIMM_A1 执行 root@ubuntu:/var/log# dmidecode -t memory，在结果中可以找到 DIMM_A1 的信息 1234567891011121314151617Memory Device Array Handle: 0x0032 Error Information Handle: Not Provided Total Width: 72 bits Data Width: 64 bits Size: 4096 MB Form Factor: DIMM Set: None Locator: DIMM_A1 Bank Locator: BANK0 Type: DDR3 Type Detail: Other Speed: 1333 MHz Manufacturer: Manufacturer0 Serial Number: SerNum1 Asset Tag: AssetTagNum1 Part Number: PartNum1 后续： 为了避免以后再发生这种日志撑满硬盘的情况，修改 logrotate 的配置文件，缩短日志备份周期，减少日志备份保留数量，启用备份压缩 参考： How can I find which memory have CE error? edac doc","tags":[{"name":"填坑日常","slug":"填坑日常","permalink":"//www.ideadsnow.com/tags/填坑日常/"}]},{"title":"曲：怀古遗殇","date":"2016-06-18T16:28:29.000Z","path":"share/曲：淮古遗殇.html","text":"无意间听到，而后看到名字，想起了些什么 评论里面都是文人墨客，俗人只能搬运点文字过来聊表心境 毕竟是“淮古遗殇” 淮左名都，竹西佳处，解鞍少驻初程。过春风十里。尽荠麦青青。自胡马窥江去后，废池乔木，犹厌言兵。渐黄昏，清角吹寒。都在空城。 杜郎俊赏，算而今、重到须惊。纵豆蔻词工，青楼梦好，难赋深情。二十四桥仍在，波心荡、冷月无声。念桥边红药，年年知为谁生。 还有 铮铮沉沉，端得是个尘埃落定，千万浮华过眼，留待后人评。 还有 溟溟漠漠 浩浩漫漫 不见离人 不知如往 …… …… …… 也听许多日式和风古曲，终以为华夏文化比和风文化多了一分旷达与大气。或许只是因为浅薄的知识面里，只有那么几首课本上过往汉人的诗，而没有大和民族的痕迹吧。","tags":[{"name":"曲","slug":"曲","permalink":"//www.ideadsnow.com/tags/曲/"}]},{"title":"事。","date":"2016-05-25T19:11:45.000Z","path":"life/事。.html","text":"十九岁生日的时候写道 想想这快二十年经历挺丰富，三教九流低俗高雅文艺粗俗的东西都懂也都会，从这个角度来说，是很有意义了吧。有很长一段时间都被人说这人超脱物外要修道出家，还有一段时间被人说这人内敛死板早晚被骗，现在就是一笑点低的工作狂。混合沉淀的人格真是难以理解。 二十岁还有一个月的时候又转了一次这段。 如今看到它，脑海中想到的竟然是一些在曾经的路上看到的可怜人。 很小的时候在老家，村子里有个疯子，吃着路边的垃圾，穿着已经破烂得无法形容的大衣，四处游荡。过了一两年再回老家的时候，那个疯子已经不见了，有人说他死了，就死在某处一个废弃的破房子里面。 上学的时候小镇上也有个一年四季穿着军大衣的中年男子，也捡垃圾吃，看起来精神好似是正常的。 每次坐车经过高速公路时，总会被公路两旁的荒山上偶尔出现的一两户人家吸引，总是在想他们是怎么生活的，周围连个水井都看不到。 还有经常在城市中看到的摆摊的小贩，有年纪很大的老爷爷老奶奶，还有背着小宝宝的中年妇女，从他们脸上总是看不到太多轻松的笑容，也许是被生活的重担压得太久了吧。 还有在山村里看到的那些脸和衣服都不怎么干净的农村娃，和城市的孩子完全不一样的面貌，无论是外形还是思想。 心中总不是滋味。 每次都在想我的运气比他们好太多，至少不用担心下一顿吃什么，今晚睡在哪，寒风凛冽的时候在哪里躲避。 想做点什么。 有了自己的收入后，从去年除夕开始，每个月都扔几百软妹币给一些公益的机构，或者直接扔给需要的个人。好像有个计划是捐给在沙漠植树防沙化的，还有个是山区孩子的每日早餐计划。扔点钱简直轻松不过，不用费心费力。 不过扔的是不是真的被用在了该用的地方，我国的新闻看多了，心里总是犯嘀咕。 上个月朋友圈有个朋友转了个募捐文，貌似是一个学生的姐姐得了白血病，家里没钱治病。想了想问了朋友句能确定真实性吗，朋友回复说主人公是他女朋友学校的一个学长。没有多想就按照文中的收款信息，用某宝转了一百软妹币给他，顺便带了句祝愿。然而连个水花都没有。那人连句“谢谢”都没有回复。即使不是为了谢，也觉得心里不是滋味。把钱扔给了一个没有礼貌没有感恩的家伙，有点令人反胃。甚至开始怀疑我是不是上当了，唉。","tags":[{"name":"自己瞎扯淡","slug":"too-young-too-simple","permalink":"//www.ideadsnow.com/tags/too-young-too-simple/"}]},{"title":"花枝春野","date":"2016-05-20T18:59:15.000Z","path":"life/花枝春野.html","text":"第一次听不才的这首歌觉得很合心境，平静不喧闹中满满的美好。 后来看到词作商连发出的《小朋友们的花枝春野》，小团子们的童声更加为这首歌平添了几分简单纯净的美。 小团子们的版本 商连的创灵： 每周六我有一个公益的小国学堂，从大一开始教，现在研究生都要毕业了呢，今天突然发现之前的小团子长成了小少年和小少女，当然又有新的小团子加进来了~看花的季节要唱花枝春野，最近几节课快结束的时候都有合唱，他们很爱这首啊哈哈，听一段就能跟着唱了。录一小段传上来，可爱可爱的~ 因为喜欢所以把这首歌分享给了小朋友，没想到小朋友几天后竟然翻唱了一下，听来有点惊喜。 小朋友的翻唱版 看到网易云音乐里不才这首歌下的一条评论有点感触 每次听不才的歌，都让我有种错觉。仿佛我可以不必逼着自己去融入一个“群体”。即使我知道这不是孤独，只是习惯使然。","tags":[{"name":"自己瞎扯淡","slug":"too-young-too-simple","permalink":"//www.ideadsnow.com/tags/too-young-too-simple/"}]},{"title":"来到你的城市【武汉】","date":"2016-05-13T15:49:30.000Z","path":"life/来到你的城市【武汉】.html","text":"2016.05.10 第一天广州南-&gt;武汉火车站 四个半小时 活动范围：武汉火车站，中南路附近 初见武汉的印象与从过往通过各种媒介了解后预想的差不多，一个二线城市，市容市貌无甚特色，吵闹嘈杂，卫生条件和见过的北方城市一样不能使用褒义词，服务人员素质一般。 貌似昨天吃错了东西，腹泻持续中。晚饭去吃了小龙虾，又和预想的一样肉少味重，不甚合口味且腹痛于是吃了几口就看着对面两位吃完了它们。倒是武昌鱼很是不错。 毫无惊喜，全在意料之中 2016.05.11 第二天黄鹤楼-&gt;武汉长江大桥（上马路下铁轨那个）-&gt;华中科技大学 黄鹤楼其实也和去过的“古代”楼台一样，已经是现代产品，上面竟然还有电梯。登高望远被眼前高高低低的楼房遮挡视线赏江不能尽兴。 唯一有点感触的是千古以来无数名家都在此处题过诗词，尤其喜欢崔颢、岳飞的。想想黄鹤楼上的诗词与雷峰塔上的完全不是一个风格，前者雄浑大气，作者往往表达忧国忧民，后者则是婉约抒情。个人还是喜欢前者。 崔颢的 登黄鹤楼昔人已乘黄鹤去， 此地空余黄鹤楼。黄鹤一去不复返， 白云千载空悠悠。晴川历历汉阳树， 芳草萋萋鹦鹉洲。日暮乡关何处是？ 烟波江上使人愁。 岳飞的 满江红·登黄鹤楼有感遥望中原，荒烟外、许多城郭。想当年、花遮柳护，凤楼龙阁。万岁山前珠翠绕，蓬壶殿里笙歌作。到而今、铁骑满郊畿，风尘恶。兵安在？膏锋锷。民安在？填沟壑。叹江山如故，千村寥落。何日请缨提锐旅，一鞭直渡清河洛。却归来、再续汉阳游，骑黄鹤。 离开黄鹤楼后去一家蔡林记解决了午饭，热干面，酸萝卜和醋为辅料，味道不错，不过店内不开空调还是有点热得烦躁。 武汉长江大桥，曾经多次坐火车路过武汉时眺望过，今日终于得以近观。不懂桥梁建筑，无法深刻理解建这座桥的技术难度，只觉得外观雄伟，上跑汽车下跑火车的思路也实在新奇。建筑风格有着浓浓的共产中国or苏联风，绿色墙漆漆一半，留白上一半，还有地板和门，与几十年前的建筑风格一致。不过说实话，从外观上来说，旁边那座西方人建的红色铁桥更漂亮。 终于达成了许了几年的一个诺言，等离开 CST 就来武汉看小朋友。鱼不错，以及，妹夫不错。 在情侣的带领下逛了光谷的世界城，拍了几张很漂亮的照片。光谷这地方，比昨天的中南路和早上去的户部巷干净得多，市容变化得像两个城市一样。如果武汉能好好整整市容，光谷这样的区域扩大化，说不定能跻身一线？（瞎扯中） 又在情侣的带领下夜游华科校园。大，比小广大校区至少大八九倍。校区规划真是省心（懒），横着画一堆平行线，竖着再画一堆平行线，线就是路，路中间的长方形就盖房子，搞定。树真是多，高耸参天的梧桐树长满了分布在所有平行线路的两边。另外华科有夸张的 35 个食堂…… 美丽的星光隧道，美丽的林荫铁道，充满学术气息的华科。 当然，重要的是完成了一个诺言，毕竟这几年放在心上的事实在没几件。小朋友萌萌哒。 2016.05.12 第三天华中科技大学-&gt;武汉大学-&gt;东湖 昨天夜游华科，除了觉得大，以及震撼于遍布所有校园主干道两旁参天的梧桐树外，就没有什么特别的印象了。起床又去了一次。听小朋友说华科有八十万颗树，被称为“森林学校”（已经记不清了呵呵哒反正大概就这意思）。参天大树长满全校，林荫中各种各样的鸟鸣，还有零星的读书的学子。 出了华科的南三门，上了辆公交，半小时后，武汉大学。人家学校里面有座山！珞珈山。山上有很多民国建筑，老图书馆，老文学院大楼（现在是数学与统计学院大楼），老外文学院，各种老，各种历史，各种沧桑，各种底蕴。老楼的外表大概是校方有意为之，不去过多修缮，野草长满了开裂的墙体，窗户的玻璃脏的脏，碎的碎，仿佛被弃置了许多年。在如此外表下，老楼的内部很现代化，路过老文学院（现在的数学与统计学院）的时候二楼有人在讲课。 要吐槽的是，在华科有种没有自行车你丫上什么大学的感觉，而到了武大，就变成了你丫没有汽车上什么大学。也许是走的路线有问题，一路走上了珞珈山，经过前面提到的老外文楼、老图书馆、老文学院，都在山上啊擦，相距还略远，每座楼都是孤零零的在那里。和在广州爬白云山一样的感觉。当时跟同行的人吐槽，“要让我选我一定选华科不选武大，武大上个课累成狗还要爬山”。然而并不会有这么纠结的事情让我选择呵呵哒。旧时的武大教员和学生身体真是好，嗯。 无论华科或武大，均是遍地的国家重点实验室或者其他的看到头衔就知道实力的场所。多了，反而很低调。路边看到的不起眼的“小破楼”，走近看到门口挂着的破旧的牌子上的文字，每次都想鞠个躬。给这个牌子，这栋楼，这里的人，这里的辉煌。到处都是这种小楼。 历史，积淀，底蕴，文化，以及从这里曾经走出的人物，现在还在这里的人才。这特么才是我想象中大学的样子。比特么商业娱乐氛围远强于教学氛围的我校不知高到哪里去了，呵呵哒。 来时正赶上小朋友忙着考试的时候，小朋友没空陪游。昨天一起吃了顿饭也没说几句话，总觉有些不舍之类的，所以带了点小礼物又跑去找小朋友。（住的地方在华科南大门，去小朋友宿舍那边竟然打车花了快十块钱哦尼玛，学校太大的坏处）。竟然被小朋友骑电动车带着又逛了一遍校园，一路狂风，一路梧桐树的飞絮，即便小朋友买了两个口罩来用，鼻炎患者依然涕泪横流难受了一晚上哎卧槽。（鼻炎患者不能读华科！！！）。 刚到武汉的时候，在武汉站门口看到广告语“大江大湖大武汉”，长江确实是大江，汉江也确实是大江，东湖也真是大湖。这两天总能在武汉街头看到“荆楚文化”相关的字眼，这段历史不熟悉，回头补补。 武昌鱼很不错，连续吃了几顿饭都点了这玩意。热干面也不错。小龙虾（武汉叫大虾）就有点鸡肋了。还有啥想不起了。总的来说，这几天在武汉吃的都很合口味。要是武汉也有好吃的小笼包就好了（手动再见.gif）。","tags":[{"name":"自己瞎扯淡","slug":"too-young-too-simple","permalink":"//www.ideadsnow.com/tags/too-young-too-simple/"}]},{"title":"毕业照？当然也是可以用来中二的","date":"2016-05-05T18:35:37.000Z","path":"life/毕业照？当然也是可以用来中二的.html","text":"自打出生到现在快二十二年了，能自己决定自己的事的机会实在是不多 很多想法，或者说处事的原则却在随着年龄增长慢慢固定下来比如—— 在不影响他人的情况下，自己想怎么活就怎么活 这个想法最初应该是来自于仙剑四中很有名的那句台词 “生尽欢，死无憾” 如果能按照自己的心意过一秒，也好过一生被动地活着 这种想法自那时就在脑子里生出了萌芽。后来接触的美国文化，尤其是接触 IT 圈的文化、硅谷文化多了，更加排斥国内环境从小带给我们的“集体主义”，更加喜欢美国的“个人主义”。这两者本没有什么对错之分，只不过更加认为后者更贴近人性，更加尊重个体，更加让个体能够追寻这个个体生命的意义在本国的文化中，”个人主义”往往是个贬义词，它总是伴随着自私、不与他人合作、自大、为获私利不择手段等等关键词出现而我所以为的“个人主义”，是我们每个人，都是一个有尊严，有感情，有理想，有优点，有缺点，有一切人所与生俱来的东西的独立个体，每个人都有区别于其他几十亿人的特征，有自己的和其他几十亿人完全不同的生命。无论这个人在其他人眼中是美是丑，是好是坏，他/她都是一个值得尊重的举世无双的个体如同在 CST 的时候老金说的： 我们不尊重你是这个集体中的一份子，我们只尊重你以一个独立的个体的身份存在于我们的集体中 看到过一句话，貌似印象中是林肯还是谁说的，大意是这样的： 当每个个体的利益得到充分满足的时候，这个集体的力量才是真正的最大化 前段时间看到个新闻，是说有个老共产党员的儿女，家境落魄，却从未去找政府部门救济，记者采访时他们回答的大意是，父亲说过再难的时候也不能给国家添麻烦。当时就想，政府求取救济是公民权利，政府救济民众是政府义务，这和给不给国家添麻烦一点关系都没有。在对这位父亲产生敬仰之情之余，理性想来这种回答显得十分荒谬，又十分令人感慨和悲伤。这件事又体现了一次我们的国家几十年所传承下来的文化的一些奇怪的地方，缺少契约精神，缺少法制意识，缺少权利和义务的意识。谈起事来，感情先行，奉献精神先行，逻辑理性放在后面。当然这样在道德上是好的，不过这是否是一个现代化法制社会该有的现象？还是该考虑考虑的 身边人，身边事。我们这个年龄的人，尤其是女性，大都会被长辈催学业、催工作、催婚事，等到一切都催完了，又到了催生育的时候，等到有了孩子，又到了循环催下一代的时候。好像所有人，都认为我们就应该这样活下去，却好像从没有人问过为什么 出现这些看似并不相关，在感情上崇高、伟大的，但在逻辑上却显得怪异的事情的原因，还是我们太过于喜欢“集体主义”了。“集体主义”的一个特征就是奉献，为集体奉献，其实就是为他人奉献，更夸张地一点来说就是为他人而活。许许多多这样奉献一生的人，被我们奉为伟人。但与此同时，许许多多为自己而活，做自己喜欢的事，总会被人说成“活在自己的世界里”，这种说法多少有些贬义 有多少人，在夜深人静的时候，曾经真诚地问过自己，我是我想做的那个我吗？如果不是，为什么不是？ 长辈们辛勤努力，使我们衣食无忧，却大都始终没有教过我们如何生活，或许他们自己也还没想清楚。父辈的那一代，依然是没有“经济基础”，就难以获得“上层建筑”的一代。而我们这一代，虽还有很多贫困地区的孩子没有这样的机会，可我们中的大多数还是有机会去考虑考虑我们的精神世界的 所以：我，喜欢什么？我，不喜欢什么？我，想去做什么？我，不想去做什么？我，现在的心情如何？我，未来的路怎么走？ 我们中的每一个我，都能够有机会去问自己这些问题，而且能凭自己的意愿书写这些问题的答案的时候，我们这个集体才会是一个真正强大的集体吧 毕业照没有去参加，总有朋友问为什么，回答总以敷衍了之。一者因为两次分班和个人圈子的原因对这个班级没有什么感情（如果可以再去拍一次高中毕业照就好了，挺怀念的）；二者觉得自己的水平达不到心中对穿那一身学士服的人所应该具有的学识的高度，偏执想法，个人选择，不会后悔；三者实属不喜热闹，不喜拍照，只想做一个路过世界的旅行家，而不想成为风景里的主角 So，路过世界的旅行家","tags":[{"name":"自己瞎扯淡","slug":"too-young-too-simple","permalink":"//www.ideadsnow.com/tags/too-young-too-simple/"}]},{"title":"HTTP 基础之 Cookie","date":"2016-04-21T02:16:16.000Z","path":"learn/http-基础之-cookie.html","text":"一般来说，了解一样东西的流程是这样的 是什么 长啥样 有啥用 怎么用 优点 缺点 按照这个逻辑，概览如下 是什么 -&gt; Cookie（复数形态 Cookies ），中文名称为“小型文本文件”或“小甜饼” 长啥样 -&gt; 打开你的浏览器，访问 谷爹，在 console 中执行 document.cookie :) 就是它！ 有啥用 -&gt; 网站用它在客户端（浏览器）存储少量信息 怎么用 -&gt; 通过 HTTP 请求头附带 or 前端 js 操作 优点 -&gt; 简单、全浏览器支持 缺点 -&gt; 能存的数据非常少；明文传输不安全；每次 HTTP 请求都会发送，增大了流量；且这玩意是纯文本字符串，js 操作非常不便 详解引自维基百科 Cookie（复数形态 Cookies ），中文名称为“小型文本文件”或“小甜饼”，指某些网站为了辨别用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）。定义于RFC2109。是网景公司的前雇员卢·蒙特利在1993年3月的发明。 为什么会出现 Cookie 这东西（用途）？试想以下情形 登陆某网站时，每次都需要输入用户名、密码，严重影响用户体验，怎么实现类似“下次自动登陆”的功能？ 某电商网站买东西，在购物车中加入了一样商品，再去其它商品页面时发现购物车内还能够显示前一件商品，怎么做到的？ 由于 HTTP 协议是无状态的，服务器并不知道用户上一次做了什么，所以上述两个需求的实现只能通过额外手段，即存储信息的方式来实现，于是我们的 Cookie 就闪耀登场了 使用 Cookie 解决以上问题 用户第一次登陆时，服务器返回一个登陆凭证（一般需加密且设置过期时间）给客户端，客户端保存该 Cookie 凭证，以后访问这个网站时，直接把该凭证发给服务器，若凭证有效，即通过验证进入网站 将商品加入购物车时，服务器在向用户发送网页时候也会发送一段保存用户已选购商品的 Cookie 给客户端，当用户浏览其他商品页面的时候，客户端把 Cookie 又发给服务器，这样服务器就知道用户上次选购了什么商品，实现了购物车功能 Cookie 的分类按照 Cookie 的存储位置 内存 Cookie -&gt; 由浏览器维护，关闭浏览器即消失 硬盘 Cookie -&gt; 存储在硬盘文件中，只有过期或用户手动清理时才会被删除 所以按照存储时间分为 非持久 Cookie 持久 Cookie Cookie 的属性首先，Cookie 作为存储数据的一种方案，最重要的当然是 name 和 value，而在一些比较复杂的场景中，只有这两个属性就远远不够了 expires/max-age 指定 Cookie 的生存期，默认情况下 Cookie 是暂时存在的，关闭浏览器即失效，即值为 session。如果想让 Cookie 长期存在，则需要指定 expire 属性的值，即 未来的一个用毫秒数表示的过期日期或时间点而 expire 属性现在已被 max-age 属性代替，max-age 用秒来设置 Cookie 的生存期 如果 max-age 为正数，则表示该 Cookie 会在 max-age 秒后失效。浏览器会将 max-age 为正数的 Cookie 持久化，写到对应的 Cookie 文件中。无论用户是否关闭浏览器，只要还未过期，则一直存在 如果 max-age 为负数，则表示该 Cookie 仅在本浏览器窗口和本窗口打开得子窗口有效，关闭窗口即失效, Cookie 默认的 max-age 值为 -1 如果 max-age 为 0，则表示删除 Cookie，由于 Cookie 机制没有提供删除 Cookie 的方法，因此通过设置该值实现即时失效删除 Cookie 的效果，浏览器会将 max-age 为 0 的 Cookie 删除 domain domain 属性可以让多个 web 服务器共享 Cookie，默认是创建 Cookie 的网页所在服务器的主机名，不能将 Cookie 的 domain 设置成服务器所在的域之外的域 path 指定和 Cookie 关联的网页，默认值为 / ，即与创建该 Cookie 的网页同目录和该目录子目录下的网页关联 secure 一个 Bool 值，指定是否以安全模式传输。默认是不安全的。当为 True 时，该 Cookie 只有以 HTTPS 连接时才会传输 HttpOnly 如果设置了 HttpOnly 属性，那么通过程序（js 或 Applet等）将无法读取 Cookie 信息 SameSite 非常新的一个属性，这个属性用途是缓解 CSRF 攻击，有两个属性值 lax 和 strict，前者只对比较危险的 HTTP 请求（比如 POST）进行限制，不允许发送 cookies 到另一个域；后者严格限制所有请求，包括 GET Cookie 缺点 Cookie 的大小被限制在 4KB 内，能够存储的信息非常少 如果不用 HTTPS 的话 Cookie 的信息是明文传输，非常不安全 每次 客户端-服务端 间的通信，都会发送、接收 Cookie，增大了通信的流量负担 Cookie 再发浏览器是以纯文本的方式保存，通过 js 对其进行操作时非常不便 有的站点会基于安全考虑禁用 Cookie 替代、优化方案参见 JavaScript本地存储实践（html5的localStorage和ie的userData） 另外可以 Google “html5 localStorage” 相关资料，不考虑老浏览器的话，这可能是现在最好的方案了","tags":[{"name":"web","slug":"web","permalink":"//www.ideadsnow.com/tags/web/"},{"name":"http","slug":"http","permalink":"//www.ideadsnow.com/tags/http/"},{"name":"cookie","slug":"cookie","permalink":"//www.ideadsnow.com/tags/cookie/"}]},{"title":"Linux 环境变量配置","date":"2016-03-30T10:01:42.000Z","path":"learn/linux-环境变量配置.html","text":"以要添加 ~ 为例 方法一export PATH=$PATH:~ 优点：不用重新加载配置文件缺点：临时使用，只在当前终端中有效 方法二首先修改 ~/目录下的 .bashrc 配置文件，添加一行 export PATH=$PATH:~然后 source .bashrc 重新加载该配置文件，使其生效 优点：对当前用户永久生效，比较常用 方法三直接修改全局配置文件 /etc/profile,方法同上 优点：对所有用户均永久起效缺点：会影响到所有用户，一般由 root 用户管理","tags":[{"name":"linux","slug":"linux","permalink":"//www.ideadsnow.com/tags/linux/"}]},{"title":"有关旅途","date":"2016-02-26T06:31:53.000Z","path":"life/有关旅途.html","text":"我走过很多城市，却都只有一面之缘 看到里少的这条微博，有些感慨。自己也走过许多地方，不也是“一面之缘”？ 没回家前一直心心念念着想去十几年前读过的小学看看，印象中校园很广阔，却也是一片荒芜，院墙上写着“十年树木，百年树人。”算上标点十个巨大的字；有四五排平房，最前面两排是教室，第三排是办公室，后面的好像是老师的宿舍；学校后面还有一小片树林，童年见过的树木也就那么几颗教室里面没有暖气，一间教室里面只有靠近前门的地方有一个小火炉。冬天班主任会让每位同学轮岗，每天早上早早到教室，为大家生火。大部分同学都是父母陪同帮忙的，凌晨四五点，天没亮，抬头可见星星月亮，搓着被冻得通红皴裂的手和脸，劈柴，烧火。每节课一结束，所有人都冲向火炉……还有印象中有次语文课刚下，老师走出房门，有同学问下节什么课，另一同学大喊：“下节数（三声）学课！”。过了几秒钟语文老师又出现在教室门口：“我刚听你们喊什么？数（三声）学课？这个字是四声同学们，应该读数（四声）学课，大家记住啊” 有很多很多年没有去看过了 昨天拖着 魏bud 同学一起去重新走了趟母校，一路上沙尘阵阵，加上那一片地区已经没有什么人居住，显得格外凄凉萧条。学校早已不是当年的样子，那几排房子都改了民居，房门紧闭，只有门口一直壮硕的藏獒冲着我们吼叫。那片小树林好像也没有了 那时候没见过世面，也无暇考虑这些事，只想着上山爬树打土仗后来三年级转学到了红会，比原来的那所学校条件好很多再后来六年级又转学到了长征，条件又好了许多，周遭事物也繁华了许多初中又转去条件更好的中学，在那里度过了我的初中，以及印象最深刻的高中到了大学，一步跳出了西北去了沿海一线城市 在此期间，家庭条件也慢慢变得好起来，很小的时候父母一个月工资加起来只有一百多块钱，每天吃饭连菜都要省着吃。跟爸妈要几毛钱买零食吃也是奢侈的，一年中有一两次吧可在那种条件下，在我三年级的时候，爸妈竟然破天荒地借钱买了台电脑，Win98 系统的。现在想想也是不可思议 物质条件慢慢好起来后，各种机缘巧合，我出门走过了许多许多地方，发达的城市，雄伟的高山，辽阔的大海，秀美的湖泊。遇到了形形色色各行各业的人，有睡大街吃垃圾的所谓“疯子”，有拾荒的老人，有荒僻的地方独自卖菜的小孩，也有一心投入摄影心中再无其他杂念的教授，还有和我同龄却声色智慧都比我强得多的人，还有正在改变这个世界的 IT 界的大牛们 家乡是个因煤而生的城镇，前几年煤炭资源慢慢枯竭，导致曾经热闹的街道越来越萧条。曾经的小学，包括小学方圆几公里的地方，都变成了真正的“鬼城”，荒无人烟 二十年的时间，我经历了从贫穷到小康的生活变迁，也目睹了穷的地方到底有多穷，发达的地方到底有多发达，还亲身经历了一片地区的兴衰 读过点书，那些写书的作者，各自有各自眼中的世界，许多人奉自己喜欢的作者的书为圣经。可走的路越多，见到的越多，越是只把那些书当成可有可无之物，太多路途上的感想和书中的不谋而合，也有太多的感想写书的人没想到。读那么多所谓分析人生、揭露社会的书，自己就真的看透了吗。写这些书的人，自己也真的看透了吗，看透了还会写吗。什么是看透。我们只是人，一种自认为高级的动物，人怎么会整天想看透世间万物，临驾于宇宙之上呢。如同人永远不会知道石头是否有思想，是否也在思考这些两腿行走的东西是不是愚蠢 读万卷书，不如行万里路 可是问题又来了，行了万里路，皆是“一面之缘”。不同时间，不同地点，不同人物，不同心态，不同身体状况，都会让同一个人对相同的事物产生不同的看法，怎样才能正确、完整地了解一样事物而不受其他因素影响,又怎样定义“正确”、“完整”？ 到底想说些什么，头绪不清不楚，就这样吧","tags":[{"name":"自己瞎扯淡","slug":"too-young-too-simple","permalink":"//www.ideadsnow.com/tags/too-young-too-simple/"}]},{"title":"歌：莲花-高晨微","date":"2016-01-30T16:47:49.000Z","path":"share/歌：莲花-高晨微.html","text":"去年十二月十八、十九号两天去看广州中央车站举办的滚石原创歌手大赛，为里少加油助威，相聚甚欢几天后里少直播时唱了这首歌，她说是参赛时遇到的一个姑娘的歌，群里的小伙伴们都表示很美很动听 本着有（狗）兴（仔）趣（队）的心态去搜了下高晨微，厦门外国语大学毕业的一个姐姐 废话不多说，说太多总是无趣 歌词： 《莲花》 词曲小微（看安妮宝贝《莲花》有感而作） 你为了什么这一生漂泊飘摇啊 像风筝你为了什么隐藏绝代风华爱了不该爱的人 傻子啊 他不该让你牵挂你的泪 落下像那珍珠撒忘了他 把回忆和他一起埋葬啊生命会开出莲花你为了什么这一生漂泊飘摇啊 像风筝你为了什么隐藏绝代风华爱了不该爱的人 傻子啊 他不该让你牵挂你的泪 落下像那珍珠撒忘了他 把回忆和他一起埋葬啊生命会开出莲花 等到莲花 盛开天际一片纯白为你采摘尘埃 无涯的尘埃傻子啊 他不该让你牵挂你的泪 落下像那珍珠撒忘了他 把回忆和他一起埋葬啊生命会开出莲花","tags":[{"name":"歌","slug":"歌","permalink":"//www.ideadsnow.com/tags/歌/"}]},{"title":"世间无废，全于心境","date":"2016-01-26T13:22:04.000Z","path":"life/世间无废，全于心境.html","text":"陈徐鹤薇—— 世间无废，全于心境你相信什么，就实现什么你渴望什么，就拥有什么","tags":[{"name":"别人瞎扯淡","slug":"too-old-too-complex","permalink":"//www.ideadsnow.com/tags/too-old-too-complex/"}]},{"title":"vim 学习","date":"2016-01-07T13:25:11.000Z","path":"learn/vim-学习.html","text":"拆分屏幕启动 使用大写的O参数垂直分屏 vim -On file1 file2 ... 使用小写的o参数水平分屏 vim -on file1 file2... 注：n是数字，表示分成几个屏 分屏 上下分割当前打开的文件 Ctrl + w s 上下分割，并打开一个新的文件 :sp filename 左右分割 Ctrl + w v 左右分割，并打开一个新文件 :vsp filename 移动光标 Vi中的光标键是h, j, k, l，要在各个屏间切换，只需要先按一下Ctrl+w，然后跟上h|j|k|l即可；除此之外，还可跟上w，用来切换到下一个屏中 移动分屏Ctrl+w + H|J|K|L 屏幕尺寸 高度 所有的屏同高 Ctrl+w = 增加高度 Ctrl+w + 减少高度 Ctrl+w - 宽度 Ctrl+w &lt; Ctrl+w &gt; 浏览目录首先，我们先从浏览代码开始。有时候，我们需要看多个文件，所以，传统的做法是，我们开多个tty终端，每个tty里用Vim打开一个文件，然后来回切换。这很没有什么效率。我们希望在一个Vim里打开多个文件，甚至浏览程序目录 浏览目录的命令很简单：（你也可以直接vim一个目录） :E 在vim中试试就知道效果~ 另外:cd &lt;dir&gt;可以改变当前工作目录pwd查看当前目录 缓冲区使用:E或者:o :e打开的文件都没有被关闭，这些文件都被缓存在缓冲区中，查看缓冲区： :ls 在缓冲区中快速切换 :bnext或:bn下一个 :bprevious或:bp上一个 :blast或:bl最后一个 :bfirst或:bf第一个 buffer中文件的相关标记含义 – （非活动的缓冲区） a （当前被激活缓冲区） h （隐藏的缓冲区） % （当前的缓冲区） # （交换缓冲区） = （只读缓冲区） + （已经更改的缓冲区） ##窗口分屏浏览 把当前窗口上下分屏，并在下面进行目录浏览 :He全称为:Hexplore（在下边分屏浏览目录） （如果要在上面，就在:He后面加个!，即:He!） 同样的，相信你也能猜到了，左右分屏 :Ve全称为:Vexplore，以及:Ve! 分屏同步滚动要让两个分屏中的文件同步移动，很简单，你需要到需要同步移动的两个屏中都输入如下命令:set scb同步:set scb!取消同步 注：set scb 是 set scrollbind 的简写 Tab页浏览目录:Te全称是:Texplorer 在多个tab页中切换 gt到下一页 gT到前一页 $num gt到第 num 页 查看tab页列表:tabs 关闭tab页 :tabclose $num如果指定了num，则关闭指定页，否则关闭当前页 或直接使用:q 打开文件时就分Tab页 vim -p file1 file2 ... vim -p *.cpp 把当前buffer中的文件全部转成tab显示:bufdo tab split 保存会话如果你用Tab或Window打开了好些文件的文件，还设置了各种滚屏同步，或是行号……，那么，你可以用下面的命令来保存会话：（你有兴趣你可以看看你的 mysession.vim文件内容，也就是一个批处理文件） :mksession ~/.mysession.vim当然如果遇到重复，则强制写入的方式为:mksession! ~/.mysession.vim 下次就可以这样打开这个会话vim -S ~/.mysession.vim 保存完会话后，也没有必要一个一个Tab/Windows的去关闭，可以简单地使用:qa（退出全部）:wqa（保存全部并退出全部） 本文是读酷壳的文章无插件Vim编程技巧笔记，感谢耗子叔的分享 还差Quickfix，关键字补全两部分内容未读，有空继续..","tags":[{"name":"vim","slug":"vim","permalink":"//www.ideadsnow.com/tags/vim/"},{"name":"工具学习","slug":"tools-learn","permalink":"//www.ideadsnow.com/tags/tools-learn/"}]}]